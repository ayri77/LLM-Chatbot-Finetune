import os
import json
import time
import pandas as pd
from config import MODELS_PATH, DATA_PATH, LOGS_PATH

from utils.prompt_utils import build_prompt
from utils.model_interactions import generate_response


def evaluate_model(model, tokenizer, model_name: str, 
                   prompts=None, max_new_tokens=100, save_dir="results",
                   do_sample=False, temperature=0.2):
    """
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–∞–º, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON –∏ CSV.
    """
    if prompts is None:
        prompts = [
            "Q: –ö—Ç–æ —Ç–∞–∫–æ–π –ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω?\nA:",
            "Q: –û–±—ä—è—Å–Ω–∏, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\nA:",
            "Q: –ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É —É—á–∏—Ç–µ–ª–µ–º –∏ —É—á–µ–Ω–∏–∫–æ–º –Ω–∞ —Ç–µ–º—É —ç–∫–æ–ª–æ–≥–∏–∏\nA:",
            "Q: –ü–µ—Ä–µ–≤–µ–¥–∏: 'I am testing a language model' –∏ –æ–±—ä—è—Å–Ω–∏ –ø–µ—Ä–µ–≤–æ–¥.\nA:",
            "Q: –ü—Ä–∏–¥—É–º–∞–π —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –∏ –æ–ø–∏—à–∏, –≥–¥–µ –æ–Ω–æ –∂–∏–≤—ë—Ç\nA:"
        ]

    results = []
    for prompt in prompts:
        print(f"üîÑ {model_name}: {prompt[:60]}")
        full_prompt = build_prompt(prompt, model_name)
        start_time = time.time()
        output = generate_response(full_prompt, model, tokenizer, max_new_tokens=max_new_tokens,
                                   do_sample=do_sample, temperature=temperature)
        elapsed = round(time.time() - start_time, 2)
        results.append({
            "model": model_name,
            "prompt": prompt,
            "response": output.strip(),
            "time_sec": elapsed
        })

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º    
    os.makedirs(save_dir, exist_ok=True)

    json_path = os.path.join(save_dir, f"{model_name}.json")
    csv_path = os.path.join(save_dir, f"{model_name}.csv")

    with open(json_path, "w", encoding="utf-8") as f:
        json.dump(results, f, indent=2, ensure_ascii=False)

    pd.DataFrame(results).to_csv(csv_path, index=False)

    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {json_path}, {csv_path}")

    return results

def summarize_all_results(result_dir="results"):
    """
    –°—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ json-—Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–æ–¥–µ–ª–µ–π –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤ –æ–¥–Ω—É —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ CSV.
    """
    summary = []
    
    for filename in os.listdir(result_dir):
        if filename.endswith(".json"):
            filepath = os.path.join(result_dir, filename)
            with open(filepath, "r", encoding="utf-8") as f:
                data = json.load(f)
                for entry in data:
                    summary.append(entry)

    df = pd.DataFrame(summary)
    
    # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    summary_table = (
        df.groupby("model")
        .agg(avg_time_sec=("time_sec", "mean"), prompt_count=("prompt", "count"))
        .reset_index()
        .sort_values(by="avg_time_sec")
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    summary_path = os.path.join(result_dir, "summary.csv")
    summary_table.to_csv(summary_path, index=False)

    return summary_table